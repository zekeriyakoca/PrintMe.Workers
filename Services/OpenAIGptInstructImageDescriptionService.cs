using System.Text;
using Newtonsoft.Json;
using PrintMe.Workers.Models;

namespace PrintMe.Workers.Services;

public class OpenAIGptInstructImageDescriptionService : IImageDescriptionService
{
    private readonly HttpClient _openAIClient;
    private readonly ILogger<OpenAIGptInstructImageDescriptionService> _logger;

    public OpenAIGptInstructImageDescriptionService(HttpClient openAIClient, ILogger<OpenAIGptInstructImageDescriptionService> logger, IConfiguration configuration)
    {
        _openAIClient = openAIClient;
        _openAIClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {configuration["OpenAIKey"]}");
        _logger = logger;
    }

    public async Task<ImageDefinition> DescribeImage(string analyzeOfImage, string descriptionOfImage, string imageUrl, int retryCount = 0)
    {
        _logger.LogInformation("Parameters for request of openAI model = analyzeOfImage: {analyzeOfImage}, descriptionOfImage: {descriptionOfImage}", analyzeOfImage, descriptionOfImage);

        var prompt = $@"
Given the image description (this is the name of the file; ignore it if it's a generic name like 'download', numbers or online repo name like 'unsplash') as '{descriptionOfImage}' and analyzeOfImage as '{analyzeOfImage}' generated by Azure Computer Vision service, try to determine which painting it is. If you don't think this is a painting by a known painter, provide a good title, motto, and description. Find a proper category and return a JSON object with the following structure:

{{
    ""Painter"": ""<Name of the painter if known, otherwise null value>"",
    ""Title"": ""<Name or Title of the painting>"",
    ""Motto"": ""<Short Description of the painting. Max 12 words>"",
    ""Description"": ""<A detailed description of the painting. Max 40 words>"",
    ""Category"": <Category number corresponding to the following Enum>
}}

public enum CategoryEnum : long
{{
    None = 0,
    NaturePrints = 1,
    BotanicalArt = 2,
    AnimalArt = 4,
    SpaceAndAstronomy = 8,
    MapsAndCities = 16,
    Landscapes = 32,
    ArtPrints = 64,
    RenaissanceMasters = 128,
    DutchMasters = 256,
    ModernMasters = 512,
    AbstractArt = 1024,
    RetroAndVintage = 2048,
    BlackAndWhite = 4096,
    HistoricalPosters = 8192,
    ClassicPosters = 16384,
    TextPosters = 32768,
    MoviesAndGamesPosters = 65536,
    MusicPosters = 131072,
    SportsPosters = 262144,
    Posters = 524287,
    FamousPainters = 1984,
    NatureAndLandscapes = 63,
}}

For example, category should be 1 for NaturePrints, 3 for BotanicalArt, 4 for AnimalArt, 6 for both BotanicalArt and AnimalArt, 9 for NaturePrints and SpaceAndAstronomy.
Be precise on defining the category. Category is important. 
RETURN ONLY JSON OBJECT. DO NOT RETURN ANYTHING ELSE.
";

        var requestBody = new
        {
            model = "gpt-3.5-turbo-instruct-0914",
            prompt = prompt,
            max_tokens = 500,
            temperature = 0.3
        };

        var requestContent = new StringContent(JsonConvert.SerializeObject(requestBody), Encoding.UTF8, "application/json");

        try
        {
            var response = await _openAIClient.PostAsync("https://api.openai.com/v1/completions", requestContent);
            var responseContent = await response.Content.ReadAsStringAsync();
            var completionResponse = JsonConvert.DeserializeObject<CompletionResponse>(responseContent);

            if (completionResponse?.Error != null)
            {
                _logger.LogError($"Error response from openAI model: {completionResponse.Error}");
                if (retryCount >= 3)
                {
                    throw new Exception("Unable to get response from openAI model after 3 retries.");
                }

                _logger.LogWarning($"Retrying : {retryCount}/3");
                return await DescribeImage(analyzeOfImage, descriptionOfImage, imageUrl, retryCount + 1);
            }

            if (completionResponse.Choices.Count > 0)
            {
                try
                {
                    _logger.LogInformation("Text response of openAI model: {responseContent}", completionResponse.Choices[0].Text.Trim());
                    return JsonConvert.DeserializeObject<ImageDefinition>(completionResponse.Choices[0].Text.Trim());
                }
                catch
                {
                    _logger.LogError("Unable to parse JSON response of openAI model: {responseContent}", completionResponse);
                    throw;
                }
            }
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Unable to describe image with openAI model: {message}", e.Message);
        }

        return new ImageDefinition();
    }
}

